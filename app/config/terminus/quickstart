#!/bin/bash

# Via Greg Anderson

#
# Usage:
#
#   ./scripts/quickstart [pantheon-site-name] [install-path]
#
# Purpose:
#
#   This script wil install all of the components needed to use
#   the `drush config-merge` command.  It will also create two
#   local Drupal 8 sites to experiment with.
#
#   If the name of a Pantheon site is provided as a commandline
#   argument, then only one local site will be created, and it
#   will be a clone of the remote Pantheon site.
#
# Notes:
#
#   This script is idempotent; you may run it multiple times with
#   no ill effects.  No action will be taken for components that
#   you have already installed before running this script.
#
#   Use --revert to erase the "working" site, and make it once again
#   a fresh copy of the dev site.
#

# Default argument values
PANTHEON_SITE=
PANTHEON_ENV='dev'
BASE_DIR=
PORT=8778

# Default option values
DEBUG=false
TRACE=false
FORCE=false
MYSQL_USER=root
MYSQL_PASSWORD=

# Initial state variables
COPY_DATABASE=false
IMPORT_CONFIGURATION=false
MODIFIED_BASHRC=false
DEBUGMSG=test
MSG='echo # '
ERROR='echo '

#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option="$1"
  shift

  case "$option" in
    -d|--debug)
      DEBUG=true
      DEBUGMSG='echo ### '
      ;;

    --trace)
      TRACE=true
      ;;

    --force)
      FORCE=true
      ;;

    --user)
      MYSQL_USER=$1
      shift
      ;;

    --pw)
      MYSQL_PASSWORD=$1
      shift
      ;;

    --port)
      PORT=8778
      ;;

    --revert)
      COPY_DATABASE=true
      IMPORT_CONFIGURATION=true
      ;;

    --env)
      PANTHEON_ENV="$1"
      shift
      ;;

    -*)
      $ERROR "Unknown option $option" >&2
      exit 1
      ;;

    *)
      if [ -z "$PANTHEON_SITE" ]
      then
        PANTHEON_SITE="$option"
      elif [ -z "$BASE_DIR" ]
      then
        BASE_DIR="$option"
      else
        $ERROR "Too many arguments" >&2
        exit 1
      fi
      ;;
  esac
done

# Note whether we have needed apps
HAS_KDIFF3="$(which kdiff3)"
HAS_PHP="$(which php)"
HAS_COMPOSER="$(which composer)"
HAS_DRUSH="$(which drush)"
HAS_TERMINUS="$(which terminus)"

# Prohibit execution as root user
if [ "$(whoami)" == "root" ]
then
  $ERROR "Do not run $0 as root." >&2
  exit 1
fi

# Exit if php is not installed
if [ -z "$HAS_PHP" ]
then
  $ERROR "Install php before running this script." >&2
fi

# Create an initial bashrc if one does not already exist.
if [ ! -f "$HOME/.bashrc" ] ; then
  echo "# Initial .bashrc created by $0." > "$HOME/.bashrc"
fi

# Set a default BASE_DIR if one was not provided
if [ -z "$BASE_DIR" ]
then
  BASE_DIR="$HOME/local/drupal"
fi

# Turn on bash debugging if --trace is specified
if $TRACE
then
  set -x
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  O . S .  -  S P E C I F I C
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check the OS
OS="$(uname -s)"

# Do OS-specific operations.
case "$OS" in
  Darwin)
    if [ -z "$HAS_KDIFF3" ]
    then
      brew install Caskroom/cask/kdiff3
    else
      $DEBUGMSG "kdiff3 already installed."
    fi
    ;;

  Linux)
    if [ -z "$HAS_KDIFF3" ]
    then
      echo "$0 would like to install kdiff3"
      sudo apt-get install kdiff3
    else
      $DEBUGMSG "kdiff3 already installed."
    fi
    ;;

  *)
    $ERROR "$OS is not supported by $0" >&2
    exit 1
    ;;
esac


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   C O M P O S E R
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# https://getcomposer.org/doc/00-intro.md#system-requirements

if [ -z "$HAS_COMPOSER" ]
then
  # Download composer and place it in $HOME/bin
  curl -sS https://getcomposer.org/installer | php
  mkdir -p "$HOME/bin"
  mv composer.phar "$HOME/bin/composer"

  # If $HOME/bin is not already in the user's $PATH, then add it to ~/.bashrc
  if [ -z "$(which composer)" ] ; then
    sed -i '1i export PATH=$PATH:$HOME/bin' ~/.bashrc
    export PATH="$PATH:$HOME/bin"
    MODIFIED_BASHRC=true
  fi
else
  $DEBUGMSG "Composer already installed."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   P A T H   V A R I A B L E S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Make sure that $HOME/bin is on our PATH

if [ "$PATH" == "${PATH/$HOME/}" ] ; then
  export PATH="$HOME/bin:$PATH"
fi

# Insure that the vendor/bin directory is on our PATH as well

if [ "$PATH" == "${PATH/.composer/}" ] ; then
  export PATH="$HOME/.composer/vendor/bin:$PATH"
fi

# Add $HOME/bin and $HOME/.composer/vendor/bin permanently to our $PATH
# in our .bashrc
chkbashrc="$(grep 'composer/vendor/bin' "$HOME/.bashrc")"
if [ "X$chkbashrc" = "X" ] ; then
  sed -e '/^ *$/,$ d' "$HOME/.bashrc" > "$HOME/.bashrc-head"
  sed -e '1,/^ *$/ d' "$HOME/.bashrc" > "$HOME/.bashrc-body"
  cp "$HOME/.bashrc-head" "$HOME/.bashrc"
cat <<- __END__ >> "$HOME/.bashrc"
[ "\$PATH" == "\${PATH/\$HOME/}" ] && export PATH="\$HOME/bin:\$PATH"
[ "\$PATH" == "\${PATH/.composer/}" ] && export PATH="\$HOME/.composer/vendor/bin:\$PATH"
__END__
  cat "$HOME/.bashrc-body" >> "$HOME/.bashrc"
  rm "$HOME/.bashrc-head"
  rm "$HOME/.bashrc-body"
  MODIFIED_BASHRC=true
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -n "$HAS_DRUSH" ]
then
  DRUSH_VERSION="$(drush version --pipe)"
  echo $DRUSH_VERSION | grep '^8' > /dev/null
  if [ "$?" != "0" ]
  then
    $ERROR "Please upgrade to Drush 8 before running this script." >&2
    exit 1
  else
    $DEBUGMSG "Drush 8 already installed."
  fi
else
  $MSG "Installing Drush"

  # Install Drush via composer
  composer global require drush/drush:dev-master --prefer-source
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   T E R M I N U S
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -z "$HAS_TERMINUS" ]
then
  $MSG "Installing Terminus"

  curl https://github.com/pantheon-systems/cli/releases/download/0.5.5/terminus.phar -L -o $HOME/bin/terminus
  chmod +x $HOME/bin/terminus
else
  $DEBUGMSG "Terminus already installed."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   F I R S T   D R U P A L   S I T E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Local site creation.
#
# If a Pantheon site was specified, then there is nothing to do here.
#
if [ -z "PANTHEON_SITE" ]
then

  $DEBUGMSG "Local Drupal site creation tbd."

fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C H E C K   E N V I R O N M E N T
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Check to see if the Mysql user and password are correct.

MYSQL_EXTRA_FILE="$HOME/.mysql/mysqlextra"
mkdir -p $(dirname $MYSQL_EXTRA_FILE)

cat << __EOT__ > "$MYSQL_EXTRA_FILE"
#This file was written by the quickstart script
[client]
user="$MYSQL_USER"
password="$MYSQL_PASSWORD"
__EOT__
chmod 700 "$MYSQL_EXTRA_FILE"

mysql --defaults-extra-file="$MYSQL_EXTRA_FILE" -e 'select 1;' > /dev/null 2>&1
if [ "$?" != "0" ] ; then
  $ERROR "Mysql credentials incorrect.  Please run again with --user and --pw." >&2
  exit 1
fi

$DEBUGMSG "Mysql credentials are okay."

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  C L O N E   A   " W O R K I N G "   D R U P A L   S I T E
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Pantheon case:
#
# Clone from Pantheon to local.
#
if [ -n "$PANTHEON_SITE" ]
then
  $DEBUGMSG "Pantheon site is $PANTHEON_SITE"

  # Insure that we are logged in
  WHOAMI=$(terminus auth whoami)
  if [ "$WHOAMI" == "You are not logged in." ]
  then
    $ERROR "Please login first with `terminus auth login`" >&2
    exit 1
  fi

  # Check our connection mode
  CONNECTION_MODE=$(terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV")
  $DEBUGMSG "$CONNECTION_MODE"
  echo "$CONNECTION_MODE" | grep -qi git
  if [ "$?" != "0" ]
  then
    if $FORCE
    then
      terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV" --set=git
      CONNECTION_MODE=$(terminus site connection-mode --site="$PANTHEON_SITE" --env="$PANTHEON_ENV")
    else
      $ERROR "The site $PANTHEON_SITE is not in 'git' mode.  Fix this via 'terminus site connection-mode --site=\"$PANTHEON_SITE\" --env=\"$PANTHEON_ENV\" --set=git', or run again with --force to force-switch to 'git' mode." >&2
      exit 1
    fi
  fi
  $DEBUGMSG "$CONNECTION_MODE"

  # Record some basic information
  UUID=$(terminus site info --site="$PANTHEON_SITE" --field=id)
  if [ "$?" != "0" ]
  then
    $ERROR "Could not determine UUID for $PANTHEON_SITE" >&2
    exit 1
  fi
  $DEBUGMSG "UUID is $UUID"

  REPO="ssh://codeserver.dev.$UUID@codeserver.dev.$UUID.drush.in:2222/~/repository.git"
  $DEBUGMSG "Repository is $REPO"

  HASH_SALT="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 75 | head -n 1)"
  $DEBUGMSG "Hash_salt is $HASH_SALT"

  LOCAL_ROOT="$BASE_DIR/$PANTHEON_SITE"
  $DEBUGMSG "Local root is $LOCAL_ROOT"

  LOCAL_SITE_ALIAS="@local.$PANTHEON_SITE"
  $DEBUGMSG "Local site alias is $LOCAL_SITE_ALIAS"

  PANTHEON_SITE_ALIAS="@pantheon.$PANTHEON_SITE.dev"
  $DEBUGMSG "Pantheon site alias is $PANTHEON_SITE_ALIAS"

  #
  # Create a local copy of the Pantheon site.
  #
  # The numbers in the comments below correspond to the
  # steps in the manual install instructions in INSTALL.md
  #

  # 1. Make sure that your Pantheon Aliases are up-to-date:

  terminus sites aliases

  # 2. Make an alias for your local site.

  # Make a site alias for the local site
  mkdir -p "$HOME/.drush"
  LOCAL_ALIAS_FILE="$HOME/.drush/local.aliases.drushrc.php"
  if [ ! -f  "$LOCAL_ALIAS_FILE" ]
  then
    echo "<?php" > "$LOCAL_ALIAS_FILE"
  fi

  cat << __EOF__ >> "$LOCAL_ALIAS_FILE"

\$aliases["$PANTHEON_SITE"] = array(
  'root' => '$LOCAL_ROOT',
  'uri' => 'localhost:$PORT',
);
__EOF__

  # 3. Check out the code for the Pantheon site.

  # If the site was already cloned, just update it.
  if [ -d "$LOCAL_ROOT" ]
  then
    $DEBUGMSG "Update code from git repository"
    cd "$LOCAL_ROOT"
    git pull origin master
  else
    $DEBUGMSG "Clone git repository"
    # Make sure that the parent directory of $LOCAL_ROOT exists
    mkdir -p "$(dirname $LOCAL_ROOT)"
    cd "$(dirname $LOCAL_ROOT)"
    git clone "$REPO" $(basename $LOCAL_ROOT)
    cd "$LOCAL_ROOT"
  fi

  # 4. Set up your .gitignore file

  if [ ! -f "$LOCAL_ROOT/.gitignore" ]
  then
    $DEBUGMSG "Set up .gitignore file"
    cp "$LOCAL_ROOT/example.gitignore" "$LOCAL_ROOT/.gitignore"
    git add "$LOCAL_ROOT/.gitignore"
    git commit -m "Create .gitignore file."
  fi

  # 5. Configure your settings.php file

  grep -q settings.local.php "$LOCAL_ROOT/sites/default/settings.php"
  if [ "$?" != "0" ] ; then
    $DEBUGMSG "Include settings.local.php from settings.php"
    echo 'if (file_exists(__DIR__ . "/settings.local.php")) { include __DIR__ . "/settings.local.php"; }' >> sites/default/settings.php
    git add sites/default/settings.php
    git commit -m "Add an include local settings line in settings.php"
    git push
  fi

  # 6. Define local configuration values in your settings.local.php file

  if [ ! -f "sites/default/settings.local.php" ]
  then

  $DEBUGMSG "Create settings.local.php"

cat << __EOF__ > sites/default/settings.local.php
<?php

\$config['system.site']['name'] = 'Local $PANTHEON_SITE site';

\$settings['hash_salt'] = '$HASH_SALT';

\$databases['default']['default'] = array (
  'database' => '${PANTHEON_SITE}localdb',
  'username' => '$MYSQL_USER',
  'password' => '$MYSQL_PASSWORD',
  'prefix' => '',
  'host' => 'localhost',
  'port' => '',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
);

\$config_directories = array(
  CONFIG_ACTIVE_DIRECTORY => 'sites/default/files/config/active',
  CONFIG_STAGING_DIRECTORY => 'sites/default/config',
);
__EOF__

    # Create the local database at the same time that we
    # set up the settings.php file.
    drush $PANTHEON_SITE_ALIAS sql-create
    COPY_DATABASE=true

  fi

  # 7. Copy the database from Pantheon to the local site

  if $COPY_DATABASE
  then
    $DEBUGMSG "sql-sync $PANTHEON_SITE_ALIAS $LOCAL_SITE_ALIAS"
    drush sql-sync $PANTHEON_SITE_ALIAS $LOCAL_SITE_ALIAS
  fi

  # If we have never used the configuration tools before, then
  # our configuration staging directory will be empty.  In that
  # instance, we should export the current configuration and commit it.
  if [ ! -f "$LOCAL_ROOT/sites/default/config/system.site.yml" ]
  then
    $DEBUGMSG "config-export $LOCAL_SITE_ALIAS"
    drush $LOCAL_SITE_ALIAS config-export
    (
      cd "$LOCAL_ROOT/sites/default/config"
      git add .
      git commit -m "Initial export of configuration."
      git push origin master
    )
    IMPORT_CONFIGURATION=false
  fi

  # In the case of a --revert, import the configuration again.
  if $IMPORT_CONFIGURATION
  then
    $DEBUGMSG "config-import $LOCAL_SITE_ALIAS"
    drush $LOCAL_SITE_ALIAS config-import
  fi

#
# Non-Pantheon (local-to-local) case:
#
# Clone the site created above to another local site.
#
else
  $DEBUGMSG "Local-to-local Drupal site clone tbd."
fi

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  F I N I S H   U P
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if $MODIFIED_BASHRC
then
  echo "#"
  echo "# IMPORTANT: To use the components installed by this script,"
  echo "#            type `source ~/.bashrc`"
  echo "#"
  echo "# Repeat in every open terminal."
  echo "#"
fi

echo
echo "TIP:  Use `drush $LOCAL_SITE_ALIAS rs` to run the local site with the php built-in webserver."
